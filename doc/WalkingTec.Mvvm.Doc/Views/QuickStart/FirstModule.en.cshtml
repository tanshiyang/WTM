<style>
  a {
    color: #01aaed
  }
</style>
<wt:fieldset field-set-style="Simple" title="first function module">
  <wt:quote>
    <p>Using WTM framework to write function modules is very simple. You only need to code the model layer, other common functions can be generated quickly through code generator.</p>
    <p>The following shows how to write a function module by an example of school information management system.</p>
    <p>*The following demonstration in a non-separation(LayUI mode between the front and back ends. If your project chooses separate(react) mode, the steps are basically the same.</p>
  </wt:quote>
  <ul class="doc">
    <li>
      First , we create WTM framework project with a multi-layer structure. For how to create a WTM project, please refer to<a href="/#/QuickStart/FirstProject"> the first project</a><br /><br />
      After creation, the structure is as follows<br /><br />
      <img src="~/imgs/CodeGen1.png" /><br /><br />
    </li>
    <li>
      In the model , we create a new model of ‘school’<br /><br />
      <wt:code title="School.cs">
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;
using WalkingTec.Mvvm.Core;

namespace FirstProject.Model
{
  public enum SchoolTypeEnum {
    [Display(Name = "公立学校")]
    PUB,
    [Display(Name = "私立学校")]
    PRI
  }

  public class School : BasePoco
  {
    [Display( Name = "学校编码")]
    [Required( ErrorMessage = "{0}是必填项")]
    [RegularExpression( "^[0-9]{3,3}$", ErrorMessage = "{0}必须是3位数字")]
    [StringLength(3)]
    public string SchoolCode { get; set; }

    [Display( Name = "学校名称")]
    [StringLength( 50, ErrorMessage = "{0}最多输入{1}个字符")]
    [Required(ErrorMessage = "{0}是必填项")]
    public string SchoolName { get; set; }

    [Display( Name = "学校类型")]
    [Required( ErrorMessage = "{0}是必填项")]
    public SchoolTypeEnum? SchoolType { get; set; }

    [Display( Name = "备注")]
    public string Remark { get; set; }
  }
}
      </wt:code>
    </li>
    <li>
      In the dataaccess , modify the DataContext file,  so that the database can generate the table of ‘school’<br /><br />
      <wt:code title="DataContext.cs">
using FirstProject.Model;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using WalkingTec.Mvvm.Core;

namespace FirstProject.DataAccess
{
  public class DataContext : FrameworkContext
  {
    public DbSet&lt;School&gt; Schools { get; set; }

    public DataContext(string cs, DBTypeEnum dbtype)
    : base(cs, dbtype)
    {
    }
  }
}
</wt:code>
    </li>
    <li>
      Delete the existing database ,press F5 to run. Now we have a model of ‘school’ a corresponding database table.<br /><br />
      <wt:quote>
        <p>At present, EF does not support automatic database update. For the convenience of demonstration, when you modify the model layer, you can delete the original database and let EF regenerate a new one.</p>
        <p>For more ways to update the database, refer to<a href="/#/Data/Migration"> data migration</a></p>
      </wt:quote>
    </li>
    <li>
      Next, we will use the code generator provided by the framework to generate the basic code.After running the program, click the code generator in the upper right corner.<br /><br />
      <img src="~/imgs/CodeGen2.png" /><br /><br />
    </li>
    <li>
      In the code generator, select the model to generate, fill in the name and area of the function module, and then click ‘generate’<br /><br />
      <img src="~/imgs/CodeGen3.png" /><br /><br />
    </li>
    <li>
      Next, we can do some simple configuration, such as which fields are form fields, which list needed to be displayed, the search criteria and so on.<br /><br />
      Here we treat all fields as form fields. list fields and import fields, make ‘school code’ ‘school name’ and ‘school type’ as search criteria, and make ‘school type’ as batch update field.<br /><br />
      <img src="~/imgs/CodeGen4.png" /><br /><br />
    </li>
    <li>
      Click ‘OK’ to generate the code.We will see a summary page to show us the number of files will be generated.<br /><br />
      <img src="~/imgs/CodeGen5.png" /><br /><br />
      In this interface, final generated code of each file can be previewed by clicking.<br /><br />
      <img src="~/imgs/CodeGen6.png" /><br /><br />
    </li>
    <li>
      After confirmation, click to complete the final code generation.<br /><br />
      After the generation is successful, exit debugging, we will see the code generated this time under the solution.<br /><br />
      <img src="~/imgs/CodeGen7.png" /><br /><br />
      <wt:quote>
        <p>Please note that: the code generator will overwrite the original file with the same name. Remember to make a backup in advance.</p>
      </wt:quote>
    </li>
    <li>
      Recompile project, run again, we will find that the module of ‘school management’ Exists in the left menu and functions such as adding, deleting, modifying, querying, importing and exporting, batch modifying, and batch deleting have been done.<br /><br />
      <img src="~/imgs/CodeGen8.png" /><br /><br />
    </li>
  </ul>

  <wt:quote>
    <p>Surprised? Happy? WTM framework is this simple.</p>
    <p>Of course, we just show a simple single table operation here. For more complex one with  many- to-many structural, WTM framework,can also identify and generate code accurately. You can try it yourself.</p>
    <p>**For many- to- many case, you need to add [middletable] on the the intermediate table manually , so that the code generator can correctly identify them.</p>
    <p>Most of the logic is in the ViewModel layer. You can take a closer look at the generated code in ViewModel and refer to other chapters of this document to understand the principle of the framework.</p>
  </wt:quote>

</wt:fieldset>
<script>
  layui.use('code', function () { layui.code({ about: false }) })
</script>
